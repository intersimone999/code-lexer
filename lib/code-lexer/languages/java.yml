lexer:
    keyword:
        - (?:(\b(abstract)\b|\b(arguments)\b|\b(boolean)\b|\b(break)\b|\b(byte)\b|\b(case)\b|\b(catch)\b|\b(char)\b|\b(const)\b|\b(continue)\b|\b(debugger)\b|\b(default)\b|\b(delete)\b|\b(double)\b|\b(do)\b|\b(else)\b|\b(eval)\b|\b(false)\b|\b(finally)\b|\b(final)\b|\b(float)\b|\b(for)\b|\b(function)\b|\b(goto)\b|\b(if)\b|\b(implements)\b|\b(int)\b|\b(in)\b|\b(instanceof)\b|\b(interface)\b|\b(let)\b|\b(long)\b|\b(native)\b|\b(new)\b|\b(null)\b|\b(package)\b|\b(private)\b|\b(protected)\b|\b(public)\b|\b(return)\b|\b(short)\b|\b(static)\b|\b(switch)\b|\b(synchronized)\b|\b(this)\b|\b(throws)\b|\b(throw)\b|\b(transient)\b|\b(true)\b|\b(try)\b|\b(typeof)\b|\b(var)\b|\b(void)\b|\b(volatile)\b|\b(while)\b|\b(with)\b|\b(yield)\b|\b(class)\b|\b(enum)\b|\b(export)\b|\b(extends)\b|\b(import)\b|\b(super)\b|\b(from)\b)|\b(strictfp)\b)
    identifier:
        - "[$A-Za-z_][$A-Za-z0-9_]*"
    comment:
        - \/\/[^\n\r]*(?=[\n\r])
        - \/\/.*$
        - \/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/
    string:
        - \"([^"]|\\\")*\"
        - \'[^']*\'
    regex:
        - \/([^/]|\\\/)*\/[gim]*
    number:
        - \-?[0-9]*\.[0-9]e\-?[0-9]+
        - \-?[0-9]*\.[0-9]
        - \-?[1-9][0-9]*
        - \-?0[Xx][0-9A-Fa-f]+
        - \-?[0-9]
        - \-?0[0-7]+
    operator:
        - (\=\=\=|\!\=\=)
        - (\<\=|\>\=|\=\=|\!\=|\=\>)
        - (\&\&|\|\||\!)
        - (\+\=|\-\=|\/\=|\*\=|\%\=|\+\+|\-\-)
        - (\&|\||\~|\^|\<\<|\>\>)
        - (\=|\+|\-|\/|\*|\%)
        - (\.|\,|\:)
        - (\<|\>|\?)
    parenthesis:
        - (\(|\)|\[|\]|\{|\})
    semicolon:
        - \;
    newline:
        - "[\\n\\r]"
    indentation:
        - (?:(^\s+|(?<=\n)\s+))
    space:
        - \s
