require_relative File.expand_path("../../lib/code-lexer", __FILE__)
require 'rspec/autorun'

def tk(type, content)
    CodeLexer::Token.new(type, content)
end

def debug(tokens)
    result = "["
    
    newline = true
    tokens.each do |t| 
        if newline
            result += (" " * 12) 
            newline = false
        end
        
        result += "tk(#{t.type.inspect}, #{t.value.inspect}), "
        
        if t.type == :newline
            result += "\n"
            newline = true
        end
    end
    result += "]"
    puts result
end

describe CodeLexer::Lexer do
    it "should correctly parse a simple text" do
        lexer = CodeLexer.get("javascript")
        lexed = lexer.lex("if (a == b) return 0.0;")
        expected_tokens = [
            tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "a"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "b"), tk(:parenthesis, ")"), tk(:space, " "), tk(:keyword, "return"), tk(:space, " "), tk(:number, "0.0"), tk(:semicolon, ";"),
        ]
        expect(lexed.tokens).to eq expected_tokens
    end
    
    it "should correctly parse easing.js" do
        lexer = CodeLexer.get("javascript")
        content = File.read("#{File.dirname(File.expand_path($0))}/test_folder/examples/javascript/easing.js")
        lexed = lexer.lex(content)

        expected_tokens = [
            tk(:comment, "/*\n * Easing Functions - inspired from http://gizma.com/easing/\n * only considering the t value for the range [0, 1] => [0, 1]\n */"), tk(:newline, "\n"),
            tk(:identifier, "EasingFunctions"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// no easing, no acceleration"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "linear"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// accelerating from zero velocity"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInQuad"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// decelerating to zero velocity"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeOutQuad"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "*"), tk(:parenthesis, "("), tk(:number, "2"), tk(:operator, "-"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// acceleration until halfway, then deceleration"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInOutQuad"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "<"), tk(:number, ".5"), tk(:space, " "), tk(:operator, "?"), tk(:space, " "), tk(:number, "2"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:space, " "), tk(:operator, ":"), tk(:space, " "), tk(:number, "-1"), tk(:operator, "+"), tk(:parenthesis, "("), tk(:number, "4"), tk(:number, "-2"), tk(:operator, "*"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// accelerating from zero velocity "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInCubic"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// decelerating to zero velocity "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeOutCubic"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:parenthesis, "("), tk(:operator, "--"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "+"), tk(:number, "1"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// acceleration until halfway, then deceleration "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInOutCubic"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "<"), tk(:number, ".5"), tk(:space, " "), tk(:operator, "?"), tk(:space, " "), tk(:number, "4"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:space, " "), tk(:operator, ":"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "t"), tk(:number, "-1"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:parenthesis, "("), tk(:number, "2"), tk(:operator, "*"), tk(:identifier, "t"), tk(:number, "-2"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:parenthesis, "("), tk(:number, "2"), tk(:operator, "*"), tk(:identifier, "t"), tk(:number, "-2"), tk(:parenthesis, ")"), tk(:operator, "+"), tk(:number, "1"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// accelerating from zero velocity "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInQuart"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// decelerating to zero velocity "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeOutQuart"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:number, "1"), tk(:operator, "-"), tk(:parenthesis, "("), tk(:operator, "--"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// acceleration until halfway, then deceleration"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInOutQuart"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "<"), tk(:number, ".5"), tk(:space, " "), tk(:operator, "?"), tk(:space, " "), tk(:number, "8"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:space, " "), tk(:operator, ":"), tk(:space, " "), tk(:number, "1"), tk(:number, "-8"), tk(:operator, "*"), tk(:parenthesis, "("), tk(:operator, "--"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// accelerating from zero velocity"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInQuint"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// decelerating to zero velocity"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeOutQuint"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:number, "1"), tk(:operator, "+"), tk(:parenthesis, "("), tk(:operator, "--"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:comment, "// acceleration until halfway, then deceleration "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "easeInOutQuint"), tk(:operator, ":"), tk(:space, " "), tk(:identifier, "t"), tk(:space, " "), tk(:operator, "=>"), tk(:space, " "), tk(:identifier, "t"), tk(:operator, "<"), tk(:number, ".5"), tk(:space, " "), tk(:operator, "?"), tk(:space, " "), tk(:number, "16"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:space, " "), tk(:operator, ":"), tk(:space, " "), tk(:number, "1"), tk(:operator, "+"), tk(:number, "16"), tk(:operator, "*"), tk(:parenthesis, "("), tk(:operator, "--"), tk(:identifier, "t"), tk(:parenthesis, ")"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:operator, "*"), tk(:identifier, "t"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n")
        ]

        expect(lexed.tokens).to eq expected_tokens
    end
    
    it "should correctly parse export-json.js" do
        lexer = CodeLexer.get("javascript")
        content = File.read("#{File.dirname(File.expand_path($0))}/test_folder/examples/javascript/export-json.js")
        lexed = lexer.lex(content)

        expected_tokens = [
            tk(:comment, "// Includes functions for exporting active sheet or all sheets as JSON object (also Python object syntax compatible)."), tk(:newline, "\n"),
            tk(:comment, "// Tweak the makePrettyJSON_ function to customize what kind of JSON to export."), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "FORMAT_ONELINE"), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'One-line'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "FORMAT_MULTILINE"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'Multi-line'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "FORMAT_PRETTY"), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'Pretty'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "LANGUAGE_JS"), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'JavaScript'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "LANGUAGE_PYTHON"), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'Python'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "STRUCTURE_LIST"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'List'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "STRUCTURE_HASH"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "'Hash (keyed by \"id\" column)'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "/* Defaults for this particular spreadsheet, change as desired */"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "DEFAULT_FORMAT"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "FORMAT_PRETTY"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "DEFAULT_LANGUAGE"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "LANGUAGE_JS"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "DEFAULT_STRUCTURE"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "STRUCTURE_LIST"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "onOpen"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "ss"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "SpreadsheetApp"), tk(:operator, "."), tk(:identifier, "getActiveSpreadsheet"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "menuEntries"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "["), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "{"), tk(:identifier, "name"), tk(:operator, ":"), tk(:space, " "), tk(:string, "\"Export JSON for this sheet\""), tk(:operator, ","), tk(:space, " "), tk(:identifier, "functionName"), tk(:operator, ":"), tk(:space, " "), tk(:string, "\"exportSheet\""), tk(:parenthesis, "}"), tk(:operator, ","), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "{"), tk(:identifier, "name"), tk(:operator, ":"), tk(:space, " "), tk(:string, "\"Export JSON for all sheets\""), tk(:operator, ","), tk(:space, " "), tk(:identifier, "functionName"), tk(:operator, ":"), tk(:space, " "), tk(:string, "\"exportAllSheets\""), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "ss"), tk(:operator, "."), tk(:identifier, "addMenu"), tk(:parenthesis, "("), tk(:string, "\"Export JSON\""), tk(:operator, ","), tk(:space, " "), tk(:identifier, "menuEntries"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, " \n"), tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "makeLabel"), tk(:parenthesis, "("), tk(:identifier, "app"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "text"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "id"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "lb"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "createLabel"), tk(:parenthesis, "("), tk(:identifier, "text"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "id"), tk(:parenthesis, ")"), tk(:space, " "), tk(:identifier, "lb"), tk(:operator, "."), tk(:identifier, "setId"), tk(:parenthesis, "("), tk(:identifier, "id"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "lb"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "makeListBox"), tk(:parenthesis, "("), tk(:identifier, "app"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "name"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "items"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "listBox"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "createListBox"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setId"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setName"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "listBox"), tk(:operator, "."), tk(:identifier, "setVisibleItemCount"), tk(:parenthesis, "("), tk(:number, "1"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  \n  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "cache"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "CacheService"), tk(:operator, "."), tk(:identifier, "getPublicCache"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "selectedValue"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "cache"), tk(:operator, "."), tk(:identifier, "get"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "Logger"), tk(:operator, "."), tk(:identifier, "log"), tk(:parenthesis, "("), tk(:identifier, "selectedValue"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "items"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:operator, "++"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "listBox"), tk(:operator, "."), tk(:identifier, "addItem"), tk(:parenthesis, "("), tk(:identifier, "items"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "items"), tk(:parenthesis, "["), tk(:number, "1"), tk(:parenthesis, "]"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "selectedValue"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "listBox"), tk(:operator, "."), tk(:identifier, "setSelectedIndex"), tk(:parenthesis, "("), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "listBox"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "makeButton"), tk(:parenthesis, "("), tk(:identifier, "app"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "parent"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "name"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "callback"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "button"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "createButton"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "add"), tk(:parenthesis, "("), tk(:identifier, "button"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "handler"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "createServerClickHandler"), tk(:parenthesis, "("), tk(:identifier, "callback"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "addCallbackElement"), tk(:parenthesis, "("), tk(:identifier, "parent"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "button"), tk(:operator, "."), tk(:identifier, "addClickHandler"), tk(:parenthesis, "("), tk(:identifier, "handler"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "button"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "makeTextBox"), tk(:parenthesis, "("), tk(:identifier, "app"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:space, " "), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "textArea"), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "app"), tk(:operator, "."), tk(:identifier, "createTextArea"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setWidth"), tk(:parenthesis, "("), tk(:string, "'100%'"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setHeight"), tk(:parenthesis, "("), tk(:string, "'200px'"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setId"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "setName"), tk(:parenthesis, "("), tk(:identifier, "name"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "textArea"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "exportAllSheets"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  \n  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "ss"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "SpreadsheetApp"), tk(:operator, "."), tk(:identifier, "getActiveSpreadsheet"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "sheets"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "ss"), tk(:operator, "."), tk(:identifier, "getSheets"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "sheetsData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "{"), tk(:parenthesis, "}"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "sheets"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:operator, "++"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "sheet"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "sheets"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "rowsData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "getRowsData_"), tk(:parenthesis, "("), tk(:identifier, "sheet"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "getExportOptions"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "sheetName"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getName"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:space, " "), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "sheetsData"), tk(:parenthesis, "["), tk(:identifier, "sheetName"), tk(:parenthesis, "]"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "rowsData"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "json"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "makeJSON_"), tk(:parenthesis, "("), tk(:identifier, "sheetsData"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "getExportOptions"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "displayText_"), tk(:parenthesis, "("), tk(:identifier, "json"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "exportSheet"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "ss"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "SpreadsheetApp"), tk(:operator, "."), tk(:identifier, "getActiveSpreadsheet"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "sheet"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "ss"), tk(:operator, "."), tk(:identifier, "getActiveSheet"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "rowsData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "getRowsData_"), tk(:parenthesis, "("), tk(:identifier, "sheet"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "getExportOptions"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "json"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "makeJSON_"), tk(:parenthesis, "("), tk(:identifier, "rowsData"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "getExportOptions"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "displayText_"), tk(:parenthesis, "("), tk(:identifier, "json"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  \n"), tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "getExportOptions"), tk(:parenthesis, "("), tk(:identifier, "e"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "options"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "{"), tk(:parenthesis, "}"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  \n  "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "language"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "e"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "e"), tk(:operator, "."), tk(:identifier, "parameter"), tk(:operator, "."), tk(:identifier, "language"), tk(:space, " "), tk(:operator, "||"), tk(:space, " "), tk(:identifier, "DEFAULT_LANGUAGE"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "format"), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "e"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "e"), tk(:operator, "."), tk(:identifier, "parameter"), tk(:operator, "."), tk(:identifier, "format"), tk(:space, " "), tk(:operator, "||"), tk(:space, " "), tk(:identifier, "DEFAULT_FORMAT"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "structure"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "e"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "e"), tk(:operator, "."), tk(:identifier, "parameter"), tk(:operator, "."), tk(:identifier, "structure"), tk(:space, " "), tk(:operator, "||"), tk(:space, " "), tk(:identifier, "DEFAULT_STRUCTURE"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  \n  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "cache"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "CacheService"), tk(:operator, "."), tk(:identifier, "getPublicCache"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "cache"), tk(:operator, "."), tk(:identifier, "put"), tk(:parenthesis, "("), tk(:string, "'language'"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "language"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "cache"), tk(:operator, "."), tk(:identifier, "put"), tk(:parenthesis, "("), tk(:string, "'format'"), tk(:operator, ","), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "format"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "cache"), tk(:operator, "."), tk(:identifier, "put"), tk(:parenthesis, "("), tk(:string, "'structure'"), tk(:operator, ","), tk(:space, " "), tk(:space, " "), tk(:space, " "), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "structure"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  \n  "), tk(:identifier, "Logger"), tk(:operator, "."), tk(:identifier, "log"), tk(:parenthesis, "("), tk(:identifier, "options"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "options"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "makeJSON_"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "options"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "format"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "FORMAT_PRETTY"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "JSON"), tk(:operator, "."), tk(:identifier, "stringify"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:operator, ","), tk(:space, " "), tk(:keyword, "null"), tk(:operator, ","), tk(:space, " "), tk(:number, "4"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:space, " "), tk(:keyword, "else"), tk(:space, " "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "format"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "FORMAT_MULTILINE"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "Utilities"), tk(:operator, "."), tk(:identifier, "jsonStringify"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "jsonString"), tk(:operator, "."), tk(:identifier, "replace"), tk(:parenthesis, "("), tk(:regex, "/},/gi"), tk(:operator, ","), tk(:space, " "), tk(:string, "'},\\n'"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "prettyJSON"), tk(:operator, "."), tk(:identifier, "replace"), tk(:parenthesis, "("), tk(:regex, "/\":\\[{\"/gi"), tk(:operator, ","), tk(:space, " "), tk(:string, "'\":\\n[{\"'"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "prettyJSON"), tk(:operator, "."), tk(:identifier, "replace"), tk(:parenthesis, "("), tk(:regex, "/}\\],/gi"), tk(:operator, ","), tk(:space, " "), tk(:string, "'}],\\n'"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:space, " "), tk(:keyword, "else"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "Utilities"), tk(:operator, "."), tk(:identifier, "jsonStringify"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "language"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "LANGUAGE_PYTHON"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// add unicode markers"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "jsonString"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "jsonString"), tk(:operator, "."), tk(:identifier, "replace"), tk(:parenthesis, "("), tk(:regex, "/\"([a-zA-Z]*)\":\\s+\"/gi"), tk(:operator, ","), tk(:space, " "), tk(:string, "'\"$1\": u\"'"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "jsonString"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "displayText_"), tk(:parenthesis, "("), tk(:identifier, "text"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "output"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "HtmlService"), tk(:operator, "."), tk(:identifier, "createHtmlOutput"), tk(:parenthesis, "("), tk(:string, "\"<textarea style='width:100%;' rows='20'>\""), tk(:space, " "), tk(:operator, "+"), tk(:space, " "), tk(:identifier, "text"), tk(:space, " "), tk(:operator, "+"), tk(:space, " "), tk(:string, "\"</textarea>\""), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "output"), tk(:operator, "."), tk(:identifier, "setWidth"), tk(:parenthesis, "("), tk(:number, "400"), tk(:parenthesis, ")"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "output"), tk(:operator, "."), tk(:identifier, "setHeight"), tk(:parenthesis, "("), tk(:number, "300"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "SpreadsheetApp"), tk(:operator, "."), tk(:identifier, "getUi"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:operator, "."), tk(:identifier, "showModalDialog"), tk(:parenthesis, "("), tk(:identifier, "output"), tk(:operator, ","), tk(:space, " "), tk(:string, "'Exported JSON'"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// getRowsData iterates row by row in the input range and returns an array of objects."), tk(:newline, "\n"),
            tk(:comment, "// Each object contains all the data for a given row, indexed by its normalized column name."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - sheet: the sheet object that contains the data to be processed"), tk(:newline, "\n"),
            tk(:comment, "//   - range: the exact range of cells where the data is stored"), tk(:newline, "\n"),
            tk(:comment, "//   - columnHeadersRowIndex: specifies the row number where the column names are stored."), tk(:newline, "\n"),
            tk(:comment, "//       This argument is optional and it defaults to the row immediately above range; "), tk(:newline, "\n"),
            tk(:comment, "// Returns an Array of objects."), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "getRowsData_"), tk(:parenthesis, "("), tk(:identifier, "sheet"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "options"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "headersRange"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getRange"), tk(:parenthesis, "("), tk(:number, "1"), tk(:operator, ","), tk(:space, " "), tk(:number, "1"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getFrozenRows"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getMaxColumns"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "headers"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "headersRange"), tk(:operator, "."), tk(:identifier, "getValues"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:parenthesis, "["), tk(:number, "0"), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "dataRange"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getRange"), tk(:parenthesis, "("), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getFrozenRows"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, "+"), tk(:number, "1"), tk(:operator, ","), tk(:space, " "), tk(:number, "1"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getMaxRows"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getMaxColumns"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "objects"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "getObjects_"), tk(:parenthesis, "("), tk(:identifier, "dataRange"), tk(:operator, "."), tk(:identifier, "getValues"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "normalizeHeaders_"), tk(:parenthesis, "("), tk(:identifier, "headers"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "options"), tk(:operator, "."), tk(:identifier, "structure"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:identifier, "STRUCTURE_HASH"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "objectsById"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "{"), tk(:parenthesis, "}"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "objects"), tk(:operator, "."), tk(:identifier, "forEach"), tk(:parenthesis, "("), tk(:keyword, "function"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "objectsById"), tk(:parenthesis, "["), tk(:identifier, "object"), tk(:operator, "."), tk(:identifier, "id"), tk(:parenthesis, "]"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "object"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "objectsById"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:space, " "), tk(:keyword, "else"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "objects"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// getColumnsData iterates column by column in the input range and returns an array of objects."), tk(:newline, "\n"),
            tk(:comment, "// Each object contains all the data for a given column, indexed by its normalized row name."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - sheet: the sheet object that contains the data to be processed"), tk(:newline, "\n"),
            tk(:comment, "//   - range: the exact range of cells where the data is stored"), tk(:newline, "\n"),
            tk(:comment, "//   - rowHeadersColumnIndex: specifies the column number where the row names are stored."), tk(:newline, "\n"),
            tk(:comment, "//       This argument is optional and it defaults to the column immediately left of the range; "), tk(:newline, "\n"),
            tk(:comment, "// Returns an Array of objects."), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "getColumnsData_"), tk(:parenthesis, "("), tk(:identifier, "sheet"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "range"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "rowHeadersColumnIndex"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:identifier, "rowHeadersColumnIndex"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "rowHeadersColumnIndex"), tk(:space, " "), tk(:operator, "||"), tk(:space, " "), tk(:identifier, "range"), tk(:operator, "."), tk(:identifier, "getColumnIndex"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:space, " "), tk(:operator, "-"), tk(:space, " "), tk(:number, "1"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "headersTmp"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "sheet"), tk(:operator, "."), tk(:identifier, "getRange"), tk(:parenthesis, "("), tk(:identifier, "range"), tk(:operator, "."), tk(:identifier, "getRow"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "rowHeadersColumnIndex"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "range"), tk(:operator, "."), tk(:identifier, "getNumRows"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:number, "1"), tk(:parenthesis, ")"), tk(:operator, "."), tk(:identifier, "getValues"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "headers"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "normalizeHeaders_"), tk(:parenthesis, "("), tk(:identifier, "arrayTranspose_"), tk(:parenthesis, "("), tk(:identifier, "headersTmp"), tk(:parenthesis, ")"), tk(:parenthesis, "["), tk(:number, "0"), tk(:parenthesis, "]"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "getObjects"), tk(:parenthesis, "("), tk(:identifier, "arrayTranspose_"), tk(:parenthesis, "("), tk(:identifier, "range"), tk(:operator, "."), tk(:identifier, "getValues"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "headers"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// For every row of data in data, generates an object that contains the data. Names of"), tk(:newline, "\n"),
            tk(:comment, "// object fields are defined in keys."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - data: JavaScript 2d array"), tk(:newline, "\n"),
            tk(:comment, "//   - keys: Array of Strings that define the property names for the objects to create"), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "getObjects_"), tk(:parenthesis, "("), tk(:identifier, "data"), tk(:operator, ","), tk(:space, " "), tk(:identifier, "keys"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "objects"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "["), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "data"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "object"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "{"), tk(:parenthesis, "}"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "hasData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "false"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "j"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "j"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "j"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "cellData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:parenthesis, "["), tk(:identifier, "j"), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "isCellEmpty_"), tk(:parenthesis, "("), tk(:identifier, "cellData"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "        "), tk(:keyword, "continue"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "object"), tk(:parenthesis, "["), tk(:identifier, "keys"), tk(:parenthesis, "["), tk(:identifier, "j"), tk(:parenthesis, "]"), tk(:parenthesis, "]"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "cellData"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "hasData"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "true"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "hasData"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "objects"), tk(:operator, "."), tk(:identifier, "push"), tk(:parenthesis, "("), tk(:identifier, "object"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "objects"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Returns an Array of normalized Strings."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - headers: Array of Strings to normalize"), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "normalizeHeaders_"), tk(:parenthesis, "("), tk(:identifier, "headers"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "keys"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "["), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "headers"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "key"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "normalizeHeader_"), tk(:parenthesis, "("), tk(:identifier, "headers"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "key"), tk(:operator, "."), tk(:identifier, "length"), tk(:space, " "), tk(:operator, ">"), tk(:space, " "), tk(:number, "0"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "keys"), tk(:operator, "."), tk(:identifier, "push"), tk(:parenthesis, "("), tk(:identifier, "key"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "keys"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Normalizes a string, by removing all alphanumeric characters and using mixed case"), tk(:newline, "\n"),
            tk(:comment, "// to separate words. The output will always start with a lower case letter."), tk(:newline, "\n"),
            tk(:comment, "// This function is designed to produce JavaScript object property names."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - header: string to normalize"), tk(:newline, "\n"),
            tk(:comment, "// Examples:"), tk(:newline, "\n"),
            tk(:comment, "//   \"First Name\" -> \"firstName\""), tk(:newline, "\n"),
            tk(:comment, "//   \"Market Cap (millions) -> \"marketCapMillions"), tk(:newline, "\n"),
            tk(:comment, "//   \"1 number at the beginning is ignored\" -> \"numberAtTheBeginningIsIgnored\""), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "normalizeHeader_"), tk(:parenthesis, "("), tk(:identifier, "header"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "key"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:string, "\"\""), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "upperCase"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "false"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "header"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "letter"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "header"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "letter"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:string, "\" \""), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "key"), tk(:operator, "."), tk(:identifier, "length"), tk(:space, " "), tk(:operator, ">"), tk(:space, " "), tk(:number, "0"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "upperCase"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "true"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:keyword, "continue"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:operator, "!"), tk(:identifier, "isAlnum_"), tk(:parenthesis, "("), tk(:identifier, "letter"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:keyword, "continue"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "key"), tk(:operator, "."), tk(:identifier, "length"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:number, "0"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "isDigit_"), tk(:parenthesis, "("), tk(:identifier, "letter"), tk(:parenthesis, ")"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:keyword, "continue"), tk(:semicolon, ";"), tk(:space, " "), tk(:comment, "// first character must be a letter"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "upperCase"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "upperCase"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "false"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "key"), tk(:space, " "), tk(:operator, "+="), tk(:space, " "), tk(:identifier, "letter"), tk(:operator, "."), tk(:identifier, "toUpperCase"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:space, " "), tk(:keyword, "else"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "key"), tk(:space, " "), tk(:operator, "+="), tk(:space, " "), tk(:identifier, "letter"), tk(:operator, "."), tk(:identifier, "toLowerCase"), tk(:parenthesis, "("), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "key"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Returns true if the cell where cellData was read from is empty."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - cellData: string"), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "isCellEmpty_"), tk(:parenthesis, "("), tk(:identifier, "cellData"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:keyword, "typeof"), tk(:parenthesis, "("), tk(:identifier, "cellData"), tk(:parenthesis, ")"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:string, "\"string\""), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "cellData"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:string, "\"\""), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Returns true if the character char is alphabetical, false otherwise."), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "isAlnum_"), tk(:parenthesis, "("), tk(:identifier, "char"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, ">="), tk(:space, " "), tk(:string, "'A'"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, "<="), tk(:space, " "), tk(:string, "'Z'"), tk(:space, " "), tk(:operator, "||"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, ">="), tk(:space, " "), tk(:string, "'a'"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, "<="), tk(:space, " "), tk(:string, "'z'"), tk(:space, " "), tk(:operator, "||"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "isDigit_"), tk(:parenthesis, "("), tk(:identifier, "char"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Returns true if the character char is a digit, false otherwise."), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "isDigit_"), tk(:parenthesis, "("), tk(:identifier, "char"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, ">="), tk(:space, " "), tk(:string, "'0'"), tk(:space, " "), tk(:operator, "&&"), tk(:space, " "), tk(:identifier, "char"), tk(:space, " "), tk(:operator, "<="), tk(:space, " "), tk(:string, "'9'"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:comment, "// Given a JavaScript 2d Array, this function returns the transposed table."), tk(:newline, "\n"),
            tk(:comment, "// Arguments:"), tk(:newline, "\n"),
            tk(:comment, "//   - data: JavaScript 2d Array"), tk(:newline, "\n"),
            tk(:comment, "// Returns a JavaScript 2d Array"), tk(:newline, "\n"),
            tk(:comment, "// Example: arrayTranspose([[1,2,3],[4,5,6]]) returns [[1,4],[2,5],[3,6]]."), tk(:newline, "\n"),
            tk(:keyword, "function"), tk(:space, " "), tk(:identifier, "arrayTranspose_"), tk(:parenthesis, "("), tk(:identifier, "data"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "if"), tk(:space, " "), tk(:parenthesis, "("), tk(:identifier, "data"), tk(:operator, "."), tk(:identifier, "length"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:number, "0"), tk(:space, " "), tk(:operator, "||"), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:number, "0"), tk(:parenthesis, "]"), tk(:operator, "."), tk(:identifier, "length"), tk(:space, " "), tk(:operator, "=="), tk(:space, " "), tk(:number, "0"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "return"), tk(:space, " "), tk(:keyword, "null"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "ret"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:parenthesis, "["), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:number, "0"), tk(:parenthesis, "]"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:identifier, "ret"), tk(:operator, "."), tk(:identifier, "push"), tk(:parenthesis, "("), tk(:parenthesis, "["), tk(:parenthesis, "]"), tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "i"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "data"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "i"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:keyword, "for"), tk(:space, " "), tk(:parenthesis, "("), tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "j"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:number, "0"), tk(:semicolon, ";"), tk(:space, " "), tk(:identifier, "j"), tk(:space, " "), tk(:operator, "<"), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:operator, "."), tk(:identifier, "length"), tk(:semicolon, ";"), tk(:space, " "), tk(:operator, "++"), tk(:identifier, "j"), tk(:parenthesis, ")"), tk(:space, " "), tk(:parenthesis, "{"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:identifier, "ret"), tk(:parenthesis, "["), tk(:identifier, "j"), tk(:parenthesis, "]"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:identifier, "data"), tk(:parenthesis, "["), tk(:identifier, "i"), tk(:parenthesis, "]"), tk(:parenthesis, "["), tk(:identifier, "j"), tk(:parenthesis, "]"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:parenthesis, "}"), tk(:newline, "\n"),
            tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:keyword, "return"), tk(:space, " "), tk(:identifier, "ret"), tk(:semicolon, ";"), tk(:newline, "\n"),
            tk(:parenthesis, "}")
        ]

        expect(lexed.tokens).to eq expected_tokens
    end

    it "should correctly parse regex-weburl.js" do
        lexer = CodeLexer.get("javascript")
        content = File.read("#{File.dirname(File.expand_path($0))}/test_folder/examples/javascript/regex-weburl.js")
        lexed = lexer.lex(content)

        expected_tokens = [
            tk(:keyword, "var"), tk(:space, " "), tk(:identifier, "re_weburl"), tk(:space, " "), tk(:operator, "="), tk(:space, " "), tk(:keyword, "new"), tk(:space, " "), tk(:identifier, "RegExp"), tk(:parenthesis, "("), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:string, "\"^\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// protocol identifier (optional)"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// short syntax // still required"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"(?:(?:(?:https?|ftp):)?\\\\/\\\\/)\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// user:pass BasicAuth (optional)"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"(?:\\\\S+(?::\\\\S*)?@)?\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"(?:\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// IP address exclusion"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// private & local networks"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// IP address dotted notation octets"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// excludes loopback network 0.0.0.0"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// excludes reserved space >= 224.0.0.0"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// excludes network & broadcast addresses"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// (first & last IP address of each class)"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"|\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// host & domain names, may end with dot"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// can be replaced by a shortest alternative"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?:\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "        "), tk(:string, "\"(?:\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "          "), tk(:string, "\"[a-z0-9\\\\u00a1-\\\\uffff]\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "          "), tk(:string, "\"[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "        "), tk(:string, "\")?\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "        "), tk(:string, "\"[a-z0-9\\\\u00a1-\\\\uffff]\\\\.\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\")+\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:comment, "// TLD identifier name, may end with dot"), tk(:newline, "\n"),
            tk(:indentation, "      "), tk(:string, "\"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\")\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// port number (optional)"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"(?::\\\\d{2,5})?\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:comment, "// resource path (optional)"), tk(:newline, "\n"),
            tk(:indentation, "    "), tk(:string, "\"(?:[/?#]\\\\S*)?\""), tk(:space, " "), tk(:operator, "+"), tk(:newline, "\n"),
            tk(:indentation, "  "), tk(:string, "\"$\""), tk(:operator, ","), tk(:space, " "), tk(:string, "\"i\""), tk(:newline, "\n"),
            tk(:parenthesis, ")"), tk(:semicolon, ";"), tk(:newline, "\n")
        ]

        expect(lexed.tokens).to eq expected_tokens
    end
end
